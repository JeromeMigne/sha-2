/*
 * Copyright (C) 2017-2018 Jerome Migne
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#define BOOST_TEST_DYN_LINK
#include <boost/test/unit_test.hpp>
#include <boost/test/data/test_case.hpp>

#include "../sha2.h"
#include <array>
#include <iomanip>
#include <map>
#include <memory>
#include <string>

using namespace std;
using namespace sha2;

namespace {
map<string, unique_ptr<Hash>> sha2s;

struct Fixture_global {
    Fixture_global() {
        sha2s["sha224"].reset(new Sha224);
        sha2s["sha256"].reset(new Sha256);
        sha2s["sha384"].reset(new Sha384);
        sha2s["sha512"].reset(new Sha512);
        sha2s["sha512/224"].reset(new Sha512_224);
        sha2s["sha512/256"].reset(new Sha512_256);
    }
};

void print_hex(ostream& ostr, const string& s)
{
    auto flags = ostr.flags();
    ostr << std::hex << setfill('0');
    for (unsigned c: s) {
        ostr << setw(2) << (c & 0xff);
    }
    ostr.flags(flags);
}

} // namespace

BOOST_GLOBAL_FIXTURE(Fixture_global);

BOOST_AUTO_TEST_SUITE(test_sha2)

BOOST_AUTO_TEST_SUITE(details)

BOOST_AUTO_TEST_CASE(test_copy_bigendian,
                     * boost::unit_test::enable_if<!cpu_is_big_endian>())
{
    if (cpu_is_big_endian) return;

    const array<uint32_t, 16> in32 = {
        0x01234567, 0x89abcdef, 0x12345678, 0x9abcdef0,
        0x23456789, 0xabcdef01, 0x3456789a, 0xbcdef012,
        0x456789ab, 0xcdef0123, 0x56789abc, 0xdef01234,
        0x6789abcd, 0xef012345, 0x789abcde, 0xf0123456,
    };
    const array<uint32_t, 16> in32_reversed = {
        0x67452301, 0xefcdab89, 0x78563412, 0xf0debc9a,
        0x89674523, 0x01efcdab, 0x9a785634, 0x12f0debc,
        0xab896745, 0x2301efcd, 0xbc9a7856, 0x3412f0de,
        0xcdab8967, 0x452301ef, 0xdebc9a78, 0x563412f0,
    };
    array<uint32_t, 16> w32{};

    copy_bigendian(in32.data(), 1, w32.data());
    BOOST_CHECK_EQUAL(w32[0], in32_reversed[0]);
    const array<uint32_t, 15> zeros_15{};
    BOOST_CHECK_EQUAL_COLLECTIONS(w32.begin() + 1,  w32.end(),
                                  zeros_15.begin(), zeros_15.end());

    w32.fill(0);
    copy_bigendian(in32.data(), in32.size(), w32.data());
    BOOST_CHECK_EQUAL_COLLECTIONS(w32.begin(),           w32.end(),
                                  in32_reversed.begin(), in32_reversed.end());

    const array<uint64_t, 16> in64 = {
        0x0123456789abcdef, 0x123456789abcdef0,
        0x23456789abcdef01, 0x3456789abcdef012,
        0x456789abcdef0123, 0x56789abcdef01234,
        0x6789abcdef012345, 0x789abcdef0123456,
        0x89abcdef01234567, 0x9abcdef012345678,
        0xabcdef0123456789, 0xbcdef0123456789a,
        0xcdef0123456789ab, 0xdef0123456789abc,
        0xef0123456789abcd, 0xf0123456789abcde,
    };
    const array<uint64_t, 16> in64_reversed = {
        0xefcdab8967452301, 0xf0debc9a78563412,
        0x01efcdab89674523, 0x12f0debc9a785634,
        0x2301efcdab896745, 0x3412f0debc9a7856,
        0x452301efcdab8967, 0x563412f0debc9a78,
        0x67452301efcdab89, 0x78563412f0debc9a,
        0x8967452301efcdab, 0x9a78563412f0debc,
        0xab8967452301efcd, 0xbc9a78563412f0de,
        0xcdab8967452301ef, 0xdebc9a78563412f0,
    };
    array<uint64_t, 16> w64{};

    copy_bigendian(in64.data(), in64.size(), w64.data());
    BOOST_CHECK_EQUAL_COLLECTIONS(w64.begin(),           w64.end(),
                                  in64_reversed.begin(), in64_reversed.end());
}

BOOST_AUTO_TEST_CASE(test_padding)
{
    array<Hash::Byte, 512/8> msg_1 = {'a', 'b', 'c'};
    std::fill(msg_1.begin() + 3, msg_1.end(), 0xff);

    array<Hash::Byte, msg_1.size()> msg_1_exp = {'a', 'b', 'c', 0x80};
    uint64_t len = 5ULL << 32 | 3;
    *(msg_1_exp.rbegin() + 4) = 5 * 8;
    msg_1_exp.back()          = 3 * 8;

    State<uint32_t> h32;
    h32.fill(0xff);

    padding(h32, msg_1, len);
    BOOST_CHECK_EQUAL_COLLECTIONS(msg_1.begin(),     msg_1.end(),
                                  msg_1_exp.begin(), msg_1_exp.end());
    //------------------------------------------------------------------

    array<Hash::Byte, 1024/8> msg_2 = {'a', 'b', 'c', 'd', 'e'};
    std::fill(msg_2.begin() + 5, msg_2.end(), 0xff);
    array<Hash::Byte, msg_2.size()> msg_2_exp = {
        'a', 'b', 'c', 'd', 'e', 0x80
    };
    len = 7ULL << 32 | 5;
    *(msg_2_exp.rbegin() + 4) = 7 * 8;
    msg_2_exp.back()          = 5 * 8;

    State<uint64_t> h64;
    h64.fill(0xff);

    padding(h64, msg_2, len);
    BOOST_CHECK_EQUAL_COLLECTIONS(msg_2.begin(),     msg_2.end(),
                                  msg_2_exp.begin(), msg_2_exp.end());
}

BOOST_AUTO_TEST_CASE(test_process_block)
{
    // http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/SHA256.pdf
    // One Block Message Sample
    array<Hash::Byte, 512/8> block_1 = {'a', 'b', 'c', 0x80};
    block_1.back() = 24;

    const array<uint32_t, 8> exp_256 = {
        0xba7816bf, 0x8f01cfea, 0x414140de, 0x5dae2223,
        0xb00361a3, 0x96177a9c, 0xb410ff61, 0xf20015ad
    };

    State<uint32_t> h32 = h0_256;
    process_block(h32, block_1.data());
    BOOST_CHECK_EQUAL_COLLECTIONS(h32.begin(),     h32.end(),
                                  exp_256.begin(), exp_256.end());

    // http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/SHA512.pdf
    // One Block Message Sample
    array<Hash::Byte, 1024/8> block_2 = {'a', 'b', 'c', 0x80};
    block_2.back() = 24;

    const array<uint64_t, 8> exp_512 = {
        0xddaf35a193617aba, 0xcc417349ae204131,
        0x12e6fa4e89a97ea2, 0x0a9eeee64b55d39a,
        0x2192992a274fc1a8, 0x36ba3c23a3feebbd,
        0x454d4423643ce80e, 0x2a9ac94fa54ca49f
    };

    State<uint64_t> h64 = h0_512;
    process_block(h64, block_2.data());
    BOOST_CHECK_EQUAL_COLLECTIONS(h64.begin(),     h64.end(),
                                  exp_512.begin(), exp_512.end());
}

BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(sample_vectors)

struct Sample {
    string algo;
    string in;
    size_t occurrence;
    vector<Hash::Byte> h;
};

ostream& operator<<(ostream& ostr, const Sample& s)
{
    ostr << "{ " << s.algo << ", ";
    const size_t max_len = 10;
    print_hex(ostr, s.in.length() <= max_len ? s.in : s.in.substr(0, max_len));
    if (s.in.length() > max_len) {
        ostr << "...";
    }
    if (s.occurrence != 1) {
        ostr << " (" << s.occurrence << ')';
    }
    ostr << " }";
    return ostr;
}

// http://csrc.nist.gov/groups/ST/toolkit/examples.html#aHashing

const string two_blocks_512 =
    "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
const string two_blocks_1024 =
    "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopj"
    "klmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";

const array<Sample, 25> samples = {{
    {
        "sha224", "", 1, {
            0xd1, 0x4a, 0x02, 0x8c, 0x2a, 0x3a, 0x2b, 0xc9,
            0x47, 0x61, 0x02, 0xbb, 0x28, 0x82, 0x34, 0xc4,
            0x15, 0xa2, 0xb0, 0x1f, 0x82, 0x8e, 0xa6, 0x2a,
            0xc5, 0xb3, 0xe4, 0x2f
        }
    }, {
        "sha224", "abc", 1, {
            0x23, 0x09, 0x7d, 0x22, 0x34, 0x05, 0xd8, 0x22,
            0x86, 0x42, 0xa4, 0x77, 0xbd, 0xa2, 0x55, 0xb3,
            0x2a, 0xad, 0xbc, 0xe4, 0xbd, 0xa0, 0xb3, 0xf7,
            0xe3, 0x6c, 0x9d, 0xa7
        }
    }, {
        "sha224", two_blocks_512, 1, {
            0x75, 0x38, 0x8b, 0x16, 0x51, 0x27, 0x76, 0xcc,
            0x5d, 0xba, 0x5d, 0xa1, 0xfd, 0x89, 0x01, 0x50,
            0xb0, 0xc6, 0x45, 0x5c, 0xb4, 0xf5, 0x8b, 0x19,
            0x52, 0x52, 0x25, 0x25
        }
    }, {
        "sha224", "\xff", 1, {
            0xe3, 0x3f, 0x9d, 0x75, 0xe6, 0xae, 0x13, 0x69,
            0xdb, 0xab, 0xf8, 0x1b, 0x96, 0xb4, 0x59, 0x1a,
            0xe4, 0x6b, 0xba, 0x30, 0xb5, 0x91, 0xa6, 0xb6,
            0xc6, 0x25, 0x42, 0xb5
        }
    }, {
        "sha224", "\xe5\xe0\x99\x24", 1, {
            0xfd, 0x19, 0xe7, 0x46, 0x90, 0xd2, 0x91, 0x46,
            0x7c, 0xe5, 0x9f, 0x07, 0x7d, 0xf3, 0x11, 0x63,
            0x8f, 0x1c, 0x3a, 0x46, 0xe5, 0x10, 0xd0, 0xe4,
            0x9a, 0x67, 0x06, 0x2d
        }
    }, {
        "sha256", "", 1, {
            0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
            0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
            0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
            0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55
        }
    }, {
        "sha256", "abc", 1, {
            0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea,
            0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23,
            0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c,
            0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad
        }
    }, {
        "sha256", two_blocks_512, 1, {
            0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8,
            0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,
            0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67,
            0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1
        }
    }, {
        "sha256", "\xbd", 1, {
            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82,
            0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70,
            0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa,
            0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b
        }
    }, {
        "sha256", string(57, 0), 1, {
            0x65, 0xa1, 0x6c, 0xb7, 0x86, 0x13, 0x35, 0xd5,
            0xac, 0xe3, 0xc6, 0x07, 0x18, 0xb5, 0x05, 0x2e,
            0x44, 0x66, 0x07, 0x26, 0xda, 0x4c, 0xd1, 0x3b,
            0xb7, 0x45, 0x38, 0x1b, 0x23, 0x5a, 0x17, 0x85
        }
    }, {
        "sha256", string(1005, 'U'), 1, {
            0xf4, 0xd6, 0x2d, 0xde, 0xc0, 0xf3, 0xdd, 0x90,
            0xea, 0x13, 0x80, 0xfa, 0x16, 0xa5, 0xff, 0x8d,
            0xc4, 0xc5, 0x4b, 0x21, 0x74, 0x06, 0x50, 0xf2,
            0x4a, 0xfc, 0x41, 0x20, 0x90, 0x35, 0x52, 0xb0
        }
    }, {
        "sha256", string(1000, 0), 1000, {
            0xd2, 0x97, 0x51, 0xf2, 0x64, 0x9b, 0x32, 0xff,
            0x57, 0x2b, 0x5e, 0x0a, 0x9f, 0x54, 0x1e, 0xa6,
            0x60, 0xa5, 0x0f, 0x94, 0xff, 0x0b, 0xee, 0xdf,
            0xb0, 0xb6, 0x92, 0xb9, 0x24, 0xcc, 0x80, 0x25
        }
    }, {
        "sha384", "", 1, {
            0x38, 0xb0, 0x60, 0xa7, 0x51, 0xac, 0x96, 0x38,
            0x4c, 0xd9, 0x32, 0x7e, 0xb1, 0xb1, 0xe3, 0x6a,
            0x21, 0xfd, 0xb7, 0x11, 0x14, 0xbe, 0x07, 0x43,
            0x4c, 0x0c, 0xc7, 0xbf, 0x63, 0xf6, 0xe1, 0xda,
            0x27, 0x4e, 0xde, 0xbf, 0xe7, 0x6f, 0x65, 0xfb,
            0xd5, 0x1a, 0xd2, 0xf1, 0x48, 0x98, 0xb9, 0x5b
        }
    }, {
        "sha384", "abc", 1, {
            0xcb, 0x00, 0x75, 0x3f, 0x45, 0xa3, 0x5e, 0x8b,
            0xb5, 0xa0, 0x3d, 0x69, 0x9a, 0xc6, 0x50, 0x07,
            0x27, 0x2c, 0x32, 0xab, 0x0e, 0xde, 0xd1, 0x63,
            0x1a, 0x8b, 0x60, 0x5a, 0x43, 0xff, 0x5b, 0xed,
            0x80, 0x86, 0x07, 0x2b, 0xa1, 0xe7, 0xcc, 0x23,
            0x58, 0xba, 0xec, 0xa1, 0x34, 0xc8, 0x25, 0xa7
        }
    }, {
        "sha384", two_blocks_1024, 1, {
            0x09, 0x33, 0x0c, 0x33, 0xf7, 0x11, 0x47, 0xe8,
            0x3d, 0x19, 0x2f, 0xc7, 0x82, 0xcd, 0x1b, 0x47,
            0x53, 0x11, 0x1b, 0x17, 0x3b, 0x3b, 0x05, 0xd2,
            0x2f, 0xa0, 0x80, 0x86, 0xe3, 0xb0, 0xf7, 0x12,
            0xfc, 0xc7, 0xc7, 0x1a, 0x55, 0x7e, 0x2d, 0xb9,
            0x66, 0xc3, 0xe9, 0xfa, 0x91, 0x74, 0x60, 0x39
        }
    }, {
        "sha384", string(122, 0), 1, {
            0x12, 0xa7, 0x2a, 0xe4, 0x97, 0x27, 0x76, 0xb0,
            0xdb, 0x7d, 0x73, 0xd1, 0x60, 0xa1, 0x5e, 0xf0,
            0xd1, 0x96, 0x45, 0xec, 0x96, 0xc7, 0xf8, 0x16,
            0x41, 0x1a, 0xb7, 0x80, 0xc7, 0x94, 0xaa, 0x49,
            0x6a, 0x22, 0x90, 0x9d, 0x94, 0x1f, 0xe6, 0x71,
            0xed, 0x3f, 0x3c, 0xae, 0xe9, 0x00, 0xbd, 0xd5
        }
    }, {
        "sha512", "", 1, {
            0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd,
            0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
            0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc,
            0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
            0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0,
            0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
            0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81,
            0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e
        }
    }, {
        "sha512", "abc", 1, {
            0xdd, 0xaf, 0x35, 0xa1, 0x93, 0x61, 0x7a, 0xba,
            0xcc, 0x41, 0x73, 0x49, 0xae, 0x20, 0x41, 0x31,
            0x12, 0xe6, 0xfa, 0x4e, 0x89, 0xa9, 0x7e, 0xa2,
            0x0a, 0x9e, 0xee, 0xe6, 0x4b, 0x55, 0xd3, 0x9a,
            0x21, 0x92, 0x99, 0x2a, 0x27, 0x4f, 0xc1, 0xa8,
            0x36, 0xba, 0x3c, 0x23, 0xa3, 0xfe, 0xeb, 0xbd,
            0x45, 0x4d, 0x44, 0x23, 0x64, 0x3c, 0xe8, 0x0e,
            0x2a, 0x9a, 0xc9, 0x4f, 0xa5, 0x4c, 0xa4, 0x9f
        }
    }, {
        "sha512", two_blocks_1024, 1, {
            0x8e, 0x95, 0x9b, 0x75, 0xda, 0xe3, 0x13, 0xda,
            0x8c, 0xf4, 0xf7, 0x28, 0x14, 0xfc, 0x14, 0x3f,
            0x8f, 0x77, 0x79, 0xc6, 0xeb, 0x9f, 0x7f, 0xa1,
            0x72, 0x99, 0xae, 0xad, 0xb6, 0x88, 0x90, 0x18,
            0x50, 0x1d, 0x28, 0x9e, 0x49, 0x00, 0xf7, 0xe4,
            0x33, 0x1b, 0x99, 0xde, 0xc4, 0xb5, 0x43, 0x3a,
            0xc7, 0xd3, 0x29, 0xee, 0xb6, 0xdd, 0x26, 0x54,
            0x5e, 0x96, 0xe5, 0x5b, 0x87, 0x4b, 0xe9, 0x09
        }
    }, {
        "sha512", string(1000, 'A'), 1, {
            0x32, 0x9c, 0x52, 0xac, 0x62, 0xd1, 0xfe, 0x73,
            0x11, 0x51, 0xf2, 0xb8, 0x95, 0xa0, 0x04, 0x75,
            0x44, 0x5e, 0xf7, 0x4f, 0x50, 0xb9, 0x79, 0xc6,
            0xf7, 0xbb, 0x7c, 0xae, 0x34, 0x93, 0x28, 0xc1,
            0xd4, 0xcb, 0x4f, 0x72, 0x61, 0xa0, 0xab, 0x43,
            0xf9, 0x36, 0xa2, 0x4b, 0x00, 0x06, 0x51, 0xd4,
            0xa8, 0x24, 0xfc, 0xdd, 0x57, 0x7f, 0x21, 0x1a,
            0xef, 0x8f, 0x80, 0x6b, 0x16, 0xaf, 0xe8, 0xaf
        }
    }, {
        "sha512", string(1000, 0), 1000, {
            0xce, 0x04, 0x4b, 0xc9, 0xfd, 0x43, 0x26, 0x9d,
            0x5b, 0xbc, 0x94, 0x6c, 0xbe, 0xbc, 0x3b, 0xb7,
            0x11, 0x34, 0x11, 0x15, 0xcc, 0x4a, 0xbd, 0xf2,
            0xed, 0xbc, 0x3f, 0xf2, 0xc5, 0x7a, 0xd4, 0xb1,
            0x5d, 0xeb, 0x69, 0x9b, 0xda, 0x25, 0x7f, 0xea,
            0x5a, 0xef, 0x9c, 0x6e, 0x55, 0xfc, 0xf4, 0xcf,
            0x9d, 0xc2, 0x5a, 0x8c, 0x3c, 0xe2, 0x5f, 0x2e,
            0xfe, 0x90, 0x90, 0x83, 0x79, 0xbf, 0xf7, 0xed
        }
    }, {
        "sha512/224", "abc", 1, {
            0x46, 0x34, 0x27, 0x0f, 0x70, 0x7b, 0x6a, 0x54,
            0xda, 0xae, 0x75, 0x30, 0x46, 0x08, 0x42, 0xe2,
            0x0e, 0x37, 0xed, 0x26, 0x5c, 0xee, 0xe9, 0xa4,
            0x3e, 0x89, 0x24, 0xaa
        }
    }, {
        "sha512/224", two_blocks_1024, 1, {
            0x23, 0xfe, 0xc5, 0xbb, 0x94, 0xd6, 0x0b, 0x23,
            0x30, 0x81, 0x92, 0x64, 0x0b, 0x0c, 0x45, 0x33,
            0x35, 0xd6, 0x64, 0x73, 0x4f, 0xe4, 0x0e, 0x72,
            0x68, 0x67, 0x4a, 0xf9
        }
    }, {
        "sha512/256", "abc", 1, {
            0x53, 0x04, 0x8e, 0x26, 0x81, 0x94, 0x1e, 0xf9,
            0x9b, 0x2e, 0x29, 0xb7, 0x6b, 0x4c, 0x7d, 0xab,
            0xe4, 0xc2, 0xd0, 0xc6, 0x34, 0xfc, 0x6d, 0x46,
            0xe0, 0xe2, 0xf1, 0x31, 0x07, 0xe7, 0xaf, 0x23
        }
    }, {
        "sha512/256", two_blocks_1024, 1, {
            0x39, 0x28, 0xe1, 0x84, 0xfb, 0x86, 0x90, 0xf8,
            0x40, 0xda, 0x39, 0x88, 0x12, 0x1d, 0x31, 0xbe,
            0x65, 0xcb, 0x9d, 0x3e, 0xf8, 0x3e, 0xe6, 0x14,
            0x6f, 0xea, 0xc8, 0x61, 0xe1, 0x9b, 0x56, 0x3a
        }
    }
}};

BOOST_DATA_TEST_CASE(test_sample, boost::unit_test::data::make(samples))
{
    auto it = sha2s.find(sample.algo);
    BOOST_REQUIRE(it != sha2s.end());
    it->second->reset();
    for (size_t i = 0; i < sample.occurrence; i++) {
        it->second->update(sample.in.data(), sample.in.length());
    }
    vector<Hash::Byte> h;
    it->second->terminate(h);
    BOOST_CHECK_EQUAL_COLLECTIONS(h.begin(),        h.end(),
                                  sample.h.begin(), sample.h.end());
}

BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_CASE(test_compute)
{
    Sha256 sha256;
    vector<Hash::Byte> h;

    sha256.compute("abc", 3, h);

    const array<Hash::Byte, 32> h_1 = {
        0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea,
        0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23,
        0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c,
        0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad
    };
    BOOST_CHECK_EQUAL_COLLECTIONS(h.begin(), h.end(), h_1.begin(), h_1.end());

    sha256.compute("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
                   56, h);
    const array<Hash::Byte, 32> h_2 = {
        0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8,
        0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,
        0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67,
        0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1
    };
    BOOST_CHECK_EQUAL_COLLECTIONS(h.begin(), h.end(), h_2.begin(), h_2.end());
}

BOOST_AUTO_TEST_SUITE_END()
